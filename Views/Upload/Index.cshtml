@{
    ViewData["Title"] = "Upload de Arquivos";
}

<div class="container-fluid">
    <!-- Box de Upload -->
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="card-title mb-0">Upload de Arquivos</h5>
        </div>
        <div class="card-body">
            <form id="uploadForm" class="row g-3 align-items-end">
                <div class="col-md-9">
                    <label for="files" class="form-label">Selecione os arquivos</label>
                    <input type="file" class="form-control" id="files" multiple required>
                </div>
                <div class="col-md-3">
                    <button type="button" class="btn btn-primary w-100" onclick="handleUpload()">
                        <i class="fas fa-upload"></i> Upload
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Tabela de Lotes -->
    <div class="card">
        <div class="card-header">
            <h5 class="card-title mb-0">Lotes de Upload</h5>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead>
                        <tr>
                            <th>ID Upload</th>
                            <th>ID Lote</th>
                            <th>Arquivos</th>
                            <th>Progresso</th>
                            <th>Status</th>
                            <th>Mensagem</th>
                            <th>Data Início</th>
                        </tr>
                    </thead>
                    <tbody id="batchTableBody">
                        <!-- Preenchido via JavaScript -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Tabela de Arquivos (oculta) -->
    <div class="card d-none">
        <div class="card-header">
            <h5 class="card-title mb-0">Arquivos do Lote</h5>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead>
                        <tr>
                            <th>Nome</th>
                            <th>Empresa</th>
                            <th>Layout</th>
                            <th>Status</th>
                            <th>Data Início</th>
                            <th>Data Fim</th>
                        </tr>
                    </thead>
                    <tbody id="fileTableBody">
                        <!-- Preenchido via JavaScript -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Modal de Erro -->
<div class="modal fade" id="errorModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Erro</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p id="errorMessage"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
            </div>
        </div>
    </div>
</div>

<style>
    .card {
        border: none;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        border-radius: 8px;
        margin-bottom: 1rem;
    }

    .card-header {
        background-color: #fff;
        border-bottom: 1px solid rgba(0,0,0,0.1);
        padding: 1rem;
    }

    .table {
        margin-bottom: 0;
        font-size: 0.875rem;
    }

    .table th {
        background-color: #2c3e50;
        color: #fff;
        font-weight: 500;
        border: none;
        padding: 0.75rem 1rem;
    }

    .table td {
        vertical-align: middle;
        padding: 0.75rem 1rem;
        border-bottom: 1px solid rgba(0,0,0,0.05);
    }

    .table tbody tr:hover {
        background-color: rgba(44, 62, 80, 0.05);
    }

    .progress {
        height: 8px;
        border-radius: 4px;
        background-color: #e9ecef;
    }

    .progress-bar {
        background-color: #2c3e50;
    }

    .badge {
        padding: 0.5em 0.8em;
        font-weight: 500;
    }

    .btn {
        border-radius: 6px;
        padding: 0.5rem 1rem;
        font-weight: 500;
    }

    .btn-primary {
        background-color: #2c3e50;
        border-color: #2c3e50;
    }

    .btn-primary:hover {
        background-color: #34495e;
        border-color: #34495e;
    }

    .form-control {
        border-radius: 6px;
        border: 1px solid #dee2e6;
        padding: 0.5rem 0.75rem;
    }

    .form-control:focus {
        border-color: #2c3e50;
        box-shadow: 0 0 0 0.25rem rgba(44, 62, 80, 0.25);
    }

    .form-label {
        color: #2c3e50;
        font-weight: 500;
    }
</style>

@section Scripts {
    <script src="~/js/DevonnoUploader.js"></script>

    <script>
        //console.log('Inicializando conexão SignalR na View...');
        
        //let connection = new signalR.HubConnectionBuilder()
        //    .withUrl("/importacaoHub")
        //    .withAutomaticReconnect()
        //    .build();

        //connection.on("ReceberStatusImportacao", function (status) {
        //    console.log('Status recebido na View:', status);
        //    atualizarTabelas(status);
        //});

        //connection.start()
        //    .then(() => {
        //        console.log('Conexão SignalR estabelecida na View');
        //    })
        //    .catch(function (err) {
        //        console.error('Erro na conexão SignalR na View:', err.toString());
        //    });

        //function atualizarTabelas(status) {
        //    try {
        //        console.log('Atualizando tabelas com status:', status);

        //        // Validação dos dados
        //        if (!status || !status.nomeArquivo) {
        //            console.error('Status inválido:', status);
        //            return;
        //        }

        //        // Atualiza a tabela de lotes
        //        const batchTableBody = document.getElementById('batchTableBody');
        //        if (!batchTableBody) {
        //            console.error('Elemento batchTableBody não encontrado');
        //            return;
        //        }

        //        const row = document.createElement('tr');
        //        const dataHora = status.dataHora ? new Date(status.DataHora).toLocaleString() : '-';
                
        //        row.innerHTML = `
        //            <td>${status.NomeArquivo || '-'}</td>
        //            <td>${status.Status || 'DESCONHECIDO'}</td>
        //            <td>${dataHora}</td>
        //            <td>
        //                <span class="badge ${getStatusClass(status.Status)}">
        //                    ${status.Status || 'DESCONHECIDO'}
        //                </span>
        //            </td>
        //        `;
                
        //        batchTableBody.insertBefore(row, batchTableBody.firstChild);
        //        console.log('Tabela de lotes atualizada');

        //        // Atualiza a tabela de arquivos
        //        const fileTableBody = document.getElementById('fileTableBody');
        //        if (!fileTableBody) {
        //            console.error('Elemento fileTableBody não encontrado');
        //            return;
        //        }

        //        const fileRow = document.createElement('tr');
        //        const dataFim = status.Status === 'FINALIZADO' ? dataHora : '-';
                
        //        fileRow.innerHTML = `
        //            <td>${status.NomeArquivo || '-'}</td>
        //            <td>-</td>
        //            <td>-</td>
        //            <td>
        //                <span class="badge ${getStatusClass(status.Status)}">
        //                    ${status.Status || 'DESCONHECIDO'}
        //                </span>
        //            </td>
        //            <td>${dataHora}</td>
        //            <td>${dataFim}</td>
        //        `;
                
        //        fileTableBody.insertBefore(fileRow, fileTableBody.firstChild);
        //        console.log('Tabela de arquivos atualizada');
        //    } catch (error) {
        //        console.error('Erro ao atualizar tabelas:', error);
        //    }
        //}

        function getStatusClass(status) {
            if (!status) return 'bg-secondary';
            
            switch (status.toUpperCase()) {
                case 'FINALIZADO':
                    return 'bg-success';
                case 'PROCESSANDO':
                    return 'bg-primary';
                case 'ERRO':
                    return 'bg-danger';
                case 'AGUARDANDO':
                    return 'bg-warning';
                default:
                    return 'bg-secondary';
            }
        }

        async function handleUpload() {
            console.log('Iniciando upload...');
            
            const fileInput = document.getElementById('files');
            const files = fileInput.files;

            if (files.length === 0) {
                console.warn('Nenhum arquivo selecionado');
                showError('Por favor, selecione pelo menos um arquivo.');
                return;
            }

            console.log(`Arquivos selecionados: ${files.length}`);

            const formData = new FormData();
            for (let i = 0; i < files.length; i++) {
                formData.append('arquivos', files[i]);
                console.log(`Arquivo ${i + 1}: ${files[i].name} (${files[i].size} bytes)`);
            }

            try {
                console.log('Enviando requisição para /api/ImportacaoApi/upload');
                const response = await fetch('/api/ImportacaoApi/upload', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    const error = await response.json();
                    console.error('Erro na resposta:', error);
                    throw new Error(error.erro || 'Erro ao fazer upload');
                }

                const result = await response.json();
                console.log('Upload iniciado com sucesso:', result);
            } catch (error) {
                console.error('Erro durante upload:', error);
                showError(error.message);
            }
        }

        function showError(message) {
            console.error('Exibindo erro:', message);
            const errorModal = new bootstrap.Modal(document.getElementById('errorModal'));
            document.getElementById('errorMessage').textContent = message;
            errorModal.show();
        }
    </script>
}
